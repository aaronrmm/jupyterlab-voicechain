{"version":3,"file":"lib_index_js.e569bf2e63e287b8e99e.js","mappings":";;;;;;;;;;;;;;;;;AAIuE;AAC9B;AACzC;;GAEG;AAEH,MAAM,aAAa,GAAG,CAAC,GAAoB,EAAE,OAAwB,EAAE,EAAE;IACvE,OAAO,CAAC,GAAG,CAAC,wEAAwE,CAAC,CAAC;IACtF,OAAO,CAAC,GAAG,CAAC,kBAAkB,EAAE,OAAO,CAAC,CAAC;IACzC,oCAAoC;IACpC,oCAAoC;IACpC,MAAM,SAAS,GAAG,GAAG,EAAE;QACrB,2DAA2D;QAC3D,MAAM,OAAO,GAAG,IAAI,mDAAM,EAAE,CAAC;QAC7B,MAAM,MAAM,GAAG,IAAI,gEAAc,CAAC,EAAE,OAAO,EAAE,CAAC,CAAC;QAC/C,MAAM,CAAC,EAAE,GAAG,iBAAiB,CAAC;QAC9B,MAAM,CAAC,KAAK,CAAC,KAAK,GAAG,mBAAmB,CAAC;QACzC,MAAM,CAAC,KAAK,CAAC,QAAQ,GAAG,IAAI,CAAC;QAC7B,OAAO,MAAM,CAAC;IAChB,CAAC;IACD,IAAI,MAAM,GAAG,SAAS,EAAE,CAAC;IAEzB,6BAA6B;IAC7B,MAAM,OAAO,GAAW,WAAW,CAAC;IACpC,GAAG,CAAC,QAAQ,CAAC,UAAU,CAAC,OAAO,EAAE;QAC/B,KAAK,EAAE,0BAA0B;QACjC,OAAO,EAAE,GAAG,EAAE;YACZ,oCAAoC;YACpC,IAAI,MAAM,CAAC,UAAU,EAAE;gBACrB,MAAM,GAAG,SAAS,EAAE,CAAC;aACtB;YACD,IAAI,CAAC,MAAM,CAAC,UAAU,EAAE;gBACtB,4DAA4D;gBAC5D,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;aAC/B;YACD,sBAAsB;YACtB,GAAG,CAAC,KAAK,CAAC,YAAY,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;QACpC,CAAC;KACF,CAAC,CAAC;IAEH,kCAAkC;IAClC,OAAO,CAAC,OAAO,CAAC,EAAE,OAAO,EAAE,QAAQ,EAAE,UAAU,EAAE,CAAC,CAAC;AACrD,CAAC;AAED,MAAM,MAAM,GAAgC;IAC1C,EAAE,EAAE,8BAA8B;IAClC,WAAW,EAAE,4FAA4F;IACzG,SAAS,EAAE,IAAI;IACf,QAAQ,EAAE,CAAC,iEAAe,CAAC;IAC3B,QAAQ,EAAE,aAAa;CACxB,CAAC;AAEF,iEAAe,MAAM,EAAC","sources":["webpack://jupyterlab-voicechain/./src/index.ts"],"sourcesContent":["import {\n  JupyterFrontEnd,\n  JupyterFrontEndPlugin\n} from '@jupyterlab/application';\nimport { ICommandPalette, MainAreaWidget } from '@jupyterlab/apputils';\nimport { Widget } from '@lumino/widgets';\n/**\n * Initialization data for the jupyterlab-voicechain extension.\n */\n\nconst activate_func = (app: JupyterFrontEnd, palette: ICommandPalette) =>{\n  console.log('JupyterLab extension jupyterlab-voicechain.activate_func is activated!');\n  console.log('ICommandPalette:', palette);\n  // Define a widget creator function,\n  // then call it to make a new widget\n  const newWidget = () => {\n    // Create a blank content widget inside of a MainAreaWidget\n    const content = new Widget();\n    const widget = new MainAreaWidget({ content });\n    widget.id = 'apod-jupyterlab';\n    widget.title.label = 'Astronomy Picture';\n    widget.title.closable = true;\n    return widget;\n  }\n  let widget = newWidget();\n\n  // Add an application command\n  const command: string = 'apod:open';\n  app.commands.addCommand(command, {\n    label: 'Random Astronomy Picture',\n    execute: () => {\n      // Regenerate the widget if disposed\n      if (widget.isDisposed) {\n        widget = newWidget();\n      }\n      if (!widget.isAttached) {\n        // Attach the widget to the main work area if it's not there\n        app.shell.add(widget, 'main');\n      }\n      // Activate the widget\n      app.shell.activateById(widget.id);\n    }\n  });\n\n  // Add the command to the palette.\n  palette.addItem({ command, category: 'Tutorial' });\n}\n\nconst plugin: JupyterFrontEndPlugin<void> = {\n  id: 'jupyterlab-voicechain:plugin',\n  description: 'A Jupyterlab extension that provides voice commands for AI code completion with LangChain.',\n  autoStart: true,\n  requires: [ICommandPalette],\n  activate: activate_func\n};\n\nexport default plugin;\n"],"names":[],"sourceRoot":""}